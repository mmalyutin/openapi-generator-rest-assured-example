{{>licenseInfo}}

package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import {{invokerPackage}}.ApiClient;
import {{apiPackage}}.{{classname}};
import com.google.inject.Inject;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
//import io.qameta.allure.Owner;
//import io.qameta.allure.Description;
import org.hamcrest.MatcherAssert;
import name.falgout.jeffrey.testing.junit5.GuiceExtension;
import name.falgout.jeffrey.testing.junit5.IncludeModule;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.extension.ExtendWith;
import {{invokerPackage}}.Prod;
import {{invokerPackage}}.module.ExampleApiModule;
{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Collection;
import java.util.function.Consumer;
import java.util.function.Function;
{{/fullJavaUtil}}
import static {{invokerPackage}}.ResponseSpecBuilders.shouldBeCode;
import static {{invokerPackage}}.ResponseSpecBuilders.validatedWith;
import static {{apiPackage}}.{{classname}}.*;

/**
* API tests for {{classname}}
*/
@Disabled
public class {{classname}}Test {

{{#operations}}
    {{#operation}}
            /**
            * Generated API tests for all status codes {{operationIdCamelCase}}
            */
            //@DisplayName("{{httpMethod}} {{path}}")
            @ExtendWith(GuiceExtension.class)
            @IncludeModule(ExampleApiModule.class)
            public static class {{operationIdCamelCase}}Test {

            @Inject
            private ApiClient api;

        {{#responses}}
                @Test
                //@Owner("generated")
                //@Description("Check status code {{code}} and response for {{httpMethod}} {{path}} ({{message}})")
                public void shouldSee{{code}}{{operationIdCamelCase}}() {
            {{#allParams}}{{^isHeaderParam}}
                    //{{{dataType}}} {{paramName}} = {{example}};
                {{{dataType}}} {{paramName}} = null;{{/isHeaderParam}}{{/allParams}}
                api.{{classVarName}}().{{operationId}}(){{#allParams}}{{#required}}{{#isPathParam}}
                    .{{paramName}}Path({{paramName}}){{/isPathParam}}{{#isQueryParam}}
                    .{{paramName}}Query({{paramName}}){{/isQueryParam}}{{#isFormParam}}{{^isFile}}
                    .{{paramName}}Form({{paramName}}){{/isFile}}{{/isFormParam}}{{#isFormParam}}{{#isFile}}
                    .{{paramName}}MultiPart({{paramName}}){{/isFile}}{{/isFormParam}}{{#isBodyParam}}
                    .body({{paramName}}){{/isBodyParam}}{{/required}}{{/allParams}}
                .execute(validatedWith(shouldBeCode({{code}})));
                }
        {{/responses}}
            }
    {{/operation}}
{{/operations}}
    }